# Your answers here

A: While the final result always prints a list of ordered integers 0-9, the intermediate printouts can vary in order. The number following the "Hi" is usually but not always in order, but once the first 4 "Hi"s have loaded, any of them can say "Bye", and either a single one or multiple can say "Bye" before the next "Hi". The order of the operations is therefore nondeterministic because it is happening in parallel and depends on which thread is allocated time first. This could be important if the intermediate operations affected the same piece of memory. For instance, if printing were replaced by incrementing (a non-atomic operation) then two increments could read the current value before either has a chance to update it. This would cause the count to be too low.

B: At 10^-6 seconds, the ratio approaches 0, which means that serial is significantly (orders of magnitude) faster than parallel. At 10^-5 seconds, the ratio rises sharply to 14, then at 10^-4 seconds declines to 8 and then rises steadily up to 16 at 10^0. As the wait time increases, the ratio becomes dominated by the wait time such that a total wait time of 16s leads to a ratio of about the same. From 10^-6, it is obvious that serial can be faster than parallel. This usually happens when a lot of time is wasted switching between threads, which may be prompted by the short sleep time, especially if it is shorter than the time to switch to a new thread. I am unsure why the ratio fluctuates so sharply at 10^-5.
